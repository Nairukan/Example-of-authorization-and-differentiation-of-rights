#ifndef PAINTBUTTON_H
#define PAINTBUTTON_H

#include <QObject>      //Подключение библиотеки стандартных объектов Qt
#include <QPushButton>  //Подключение библиотеки стандартной кнопки Qt
#include <QPainter>     //Подключение библиотеки стандартного устройства для рисования Qt
#include <QImage>       //Подключение библиотеки стандартного объека изображения Qt
#include <QFontMetrics> //Подключение библиотеки стандартного инструмена работы со шрифтом Qt
#include <QTimer>       //Подключение библиотеки стандартного объекта Таймер Qt
#include <QCursor>      //Подключение библиотеки стандартных инструментов с курсором мыши в Qt

class PaintButton : public QPushButton //Объявляем класс Кнопки с изображением, наследуевомого от стандартной кнопки Qt
{
    Q_OBJECT //Подключаем определения сигналов и слотах стандартных объектов Qt для корректного взаимодействия между объектами фреймворка
public: //Функции и члены доступные извне данного класса

    PaintButton(QWidget* parent, QImage Res, QRect Source=QRect(-1,-1,-1,-1));
    /*первая сигнатура конструктора Класса, принемающий указатель на родительский объект, Картинки, которая будет являтся текстурой кнопки
    * и прямоугольник соответсвующий области использующейся картинки, изначально вся картинка. Для экземпляров без изменений при наведении
    */

    PaintButton(QWidget* parent, QImage Res1, QImage Res2, QRect Source1=QRect(-1,-1,-1,-1), QRect Source2=QRect(-1,-1,-1,-1));
    /*вторая сигнатура конструктора Класса, принемающий указатель на родительский объект, Картинок, которые будут являтся текстурами кнопки
    * и прямоугольники соответсвующий области использующейся картинки, изначально вся картинка. Для экземпляров с изменениями при наведении
    */

    ~PaintButton(){ //Деструктор класса(вызывается при удалении экземпляра, нужен для освобождение динамически выделенной памяти)
        if (T_Cursor!=nullptr)
            delete T_Cursor;
    }

private slots: //Слоты это функции, выполнение которые можно связать любым сигналом, например нажатие кнопки,
    void Tick_T(); //Слот проверяющий положение курсора относительно экземпляра
private: //Функции и члены закрытые от внешнего воздействия
    QTimer* T_Cursor; //Указатель на стадартный объект Таймер Qt
    void paintEvent(QPaintEvent* event); //Переопределённая функция объекта QAbstractButton, вызывающаяся когда поступает запрос на отрисовку объекту(при любом взаиможействии с ним)
    QImage Res1; //Картинка, которая будет являтся текстурой кнопки
    bool IsRes2=false; //Показатель меняется ли кнопка при наведении
    QImage Res2; //Картинка, которая будет являтся текстурой кнопки
    QRect Source2; //Прямоугольник соответсвующий области использующейся картинки
    QRect Source1; //Прямоугольник соответсвующий области использующейся картинки
    bool Enter=false; //Показатель указывающий на то что курсор мыши находится в пределах экземпляра
    QWidget* parent; //Указатель на родителя-виджет
};

#endif // PAINTBUTTON_H
