#ifndef CLEVEREDIT_H //Если ранее не был объявлен макрос CLEVEREDIT_H, то выполняется кусок кода до #endif, иначе просто игнорируется
#define CLEVEREDIT_H //Объявляем собственно этот макрос, это сделано для того чтобы не подключать одну и ту же библиотеку 100 раз, а что бы оно подключилось только 1 раз


#include <QObject>          //Подключение библиотеки стандартных объектов Qt
#include <QLineEdit>        //Подключение библиотеки стандартного поля для ввода Qt
#include <QMessageBox>      //Подключение библиотеки стандартного окна уведомлений Qt
#include <QLabel>           //Подключение библиотеки стандартного объекта надписи Qt
#include <QPainter>         //Подключение библиотеки стандартного устройства для рисования Qt
#include <QFontMetrics>     //Подключение библиотеки стандартного инструмена работы со шрифтом Qt
#include <QRegExpValidator> //Подключение библиотеки стандартного Валидатора данных по регулярному выражению Qt
#include <QTimer>           //Подключение библиотеки стандартного объекта Таймер Qt

class CleverEdit : public QLineEdit //Объявляем класс умного поля для ввода, наследуевомого от стандартного поля для ввода Qt
{
    Q_OBJECT    //Подключаем определения сигналов и слотах стандартных объектов Qt для корректного взаимодействия между объектами фреймворка
public: //Функции и члены доступные извне данного класса

    CleverEdit(QWidget* parent=nullptr, QString Text="", EchoMode EcMo=Normal, bool (*ValidFunc)(QString)=&CleverEdit::ValidFuncTrue, bool SpaceLegal=false);
    /*Конструктор Класса, принемающий указатель на родительский объект(изначально указано что класс является самостоятельным),
    * текста подсказки для ввода, правила копирования и отображения текста, функции валидации содержимого текста, правила запрета/разрешения пробела
    */

    ~CleverEdit(){ //Деструктор класса(вызывается при удалении экземпляра, нужен для освобождение динамически выделенной памяти)
        if (HelpText!=nullptr)
            delete HelpText;
    }

    int GetState(); //Функция возврата значения приватного поля состояния текста, основанного на результате обработки функции валидации содержимого текста
    void SetValidFunc(bool (*ValidFunc)(QString)=&CleverEdit::ValidFuncTrue); //Функция устанавливающая функцию валидации содержимого текста
    static bool NoEmptyValidFunc(QString line){return line.length();} //Пример функции валидации данных "не пустой текст", в области имён CleverEdit, доступная без создания экземпляра класса
    static bool ValidFuncTrue(QString){return true;} //Пример функции валидации данных "что угодно", в области имён CleverEdit, доступная без создания экземпляра класса
private slots: //Слоты это функции, выполнение которые можно связать любым сигналом, например нажатиес кнопки, тут они приватные то есть без возможности переопределения или прямого вызова
    void Tick_T_paintActivPosition(){Ok_forTF=1; this->repaint(); Ok_forTF=0;} //Функция для отрисовки позиции курсора в активном тексте, через определённый интервал времени
private: //Функции и члены закрытые от внешнего воздействия
    bool (*ValidFunc)(QString)=NULL; //указатель на заданную функции валидации данных, принемающая текст и возвращающая true/false
    void focusOutEvent(QFocusEvent *e); /*Переопределённая функция объекта QAbstractButton(Для этого необходимо использовать точную сигнатуру функции),
                                        * вызывающаяся когда статус активного переходит на любой другой объект
                                        */
    void focusInEvent(QFocusEvent *e); //Переопределённая функция объекта QAbstractButton(-||-), вызывающаяся когда статус активного переходит на элемент данного класса
    void mousePressEvent(QMouseEvent * e); //Переопределённая функция объекта QAbstractButton(-||-), вызывающаяся когда на экземпляр данного класса тыкнули мышкой
    void paintEvent(QPaintEvent* event); //Переопределённая функция объекта QAbstractButton(-||-), вызывающаяся когда поступает запрос на отрисовку объекту(при любом взаиможействии с ним)
    void resizeEvent(QResizeEvent* event); //Переопределённая функция объекта QAbstractItem(-||-), вызывающаяся когда происходит изменение размера экземпляра класса
    QLabel *HelpText; //Указатель на стандартный объект надпись который будет отображать подсказку по вводу
    bool Ok_forTF=0; //Показатель что небходимость в проведении фазы моргания курсора, изначально false(т.е. не надо)
    bool Activ=0; //Показатель отображающий является ли текущий элемент активным, изначально false
    int State=1; /*Показатель состояния текста,
    * 0-Текст изменяется, нельзя оценить валидность(но надеемся на лучшее),
    * 1-Введённый текст по итогу проверки функцией валидации оказался не верного формата
    * 2-Введённый текст по итогу проверки функцие валидации оказался верного формата(Я считаю это победа)
    */
    bool SpaceLegal; //Показатель необходимости блокировки пробельных символов для ввода
    bool stepOfPaint=0; //Показатель фазы моргания курсора, изначально false
    QTimer* T_paintActivPosition=new QTimer(this); //Указатель на стадартный объект Таймер Qt, изначально привязанный к созданному экемпляру таймера привязанному к конкретному экземпляру
};

#endif // CLEVEREDIT_H
